<?php
// $Id$

/**
 * @file
 * A module to perform custom migration from one version of Drupal to another.
 */

/**
 * Implementation of hook_menu().
 */
function custom_import_ausmed_menu() {
  $items = array();

  $items['admin/content/custom-import-ausmed'] = array(
    'title' => 'Custom import',
    'description' => 'Run custom import routines to migrate from one Drupal version to another.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_import_ausmed_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

function custom_import_ausmed_form() {
  drupal_set_message('Are you sure you want to run the custom import script?  No going back without re-installing the database!!!', 'warning');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Start import'),
  );

  return $form;
}

function custom_import_ausmed_form_submit($form, &$form_state) {
  $batch = array(
    'title' => t('Importing data'),
    'operations' => custom_import_ausmed_batch_operations(),
    'finished' => 'custom_import_ausmed_batch_finished',
  );

  batch_set($batch);
}

function custom_import_ausmed_batch_operations() {
  $operations = array();

  $operations[] = array('custom_import_ausmed_batch_nodes', array());
  $operations[] = array('custom_import_ausmed_batch_comments', array());

  return $operations;
}

function custom_import_ausmed_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = t('Import finished successfully.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

function custom_import_ausmed_batch_nodes(&$context) {
  db_set_active('ausmed'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('node');
    $query->condition('type', array('story'));
    $query->addExpression('COUNT(nid)', 'count');
    $max = $query->execute()->fetchField();
    $context['sandbox'] = array(
      'progress' => 0,
      'current_node' => 0,
      'max' => $max,
    );
  }

  $limit = 20; // Number of nodes to process at a time.
  $query = db_select('node', 'n');
  $query->leftjoin('node_revisions', 'nr', 'nr.vid = n.vid');
  $query->orderBy('n.nid', 'asc');
  $query->fields('n');
  $query->fields('nr', array('body', 'teaser', 'format'));
  $query->condition('n.nid', $context['sandbox']['current_node'], '>');
  $query->condition('n.type', array('story'));
  $query->range(0, $limit);
  $result = $query->execute();

  foreach ($result as $row) {
    $node = (object) array(
      'type' => 'ausmed_article',
      'uid' => 1,
      'status' => $row->status,
      'language' => LANGUAGE_NONE,
      'created' => $row->created,
      'changed' => $row->changed,
      'comment' => $row->comment,
      'title' => $row->title,
      'body' => array(LANGUAGE_NONE => array(array('value' => $row->body, 'summary' => $row->teaser, 'format' => 'full_html'))),
      'teaser' => $row->teaser,
      'log' => '',
      'data' => array('old_nid' => $row->nid),
    );

    db_set_active('ausmed'); // Switch databases.

// Migrate ausmed features taxonomy.
    $query = db_select('term_node', 'tn');
    $query->join('term_data', 'td', 'tn.tid = td.tid');
    $query->fields('tn');
    $query->fields('td');
    $query->condition('tn.nid', $row->nid);
    $taxonomys = $query->execute();
    db_set_active('default');
    foreach ($taxonomys as $taxonomy) {
      $term_name = $taxonomy->name;
      $vid = 11;
      $terms = taxonomy_get_term_by_name($term_name, 'ausmed_features');
      foreach($terms as $term) {
        $tid = $term->tid;
        $node->field_ausmed_features['und'][0] = array('tid' => $tid);
      } 
    }

// Migrate ausmed edition taxonomy.
    db_set_active('ausmed');

    $query = db_select('node', 'n');
    $query->join('content_type_story', 'cts', 'n.nid = cts.field_node_reference_nid');
    $query->fields('n', array('title'));
    $query->condition('cts.nid', $row->nid, '=');
    
    $result = $query->execute();
    $edition_name = $result->fetchField();

    db_set_active('default');
    $vid = 10;
    $ausmed_edition_terms = taxonomy_get_term_by_name($edition_name, 'ausmed_edition');
    foreach($ausmed_edition_terms as $term) {
      $tid = $term->tid;
      $node->field_ausmed_edition['und'][0] = array('tid' => $tid);
    } 

// assign promote value to articles
    db_set_active('ausmed');
    $query = db_select('node_revisions', 'nr');
    $query->join('content_type_story', 'cts', 'nr.nid = cts.field_node_reference_nid');
    $query->fields('nr', array('body'));
    $query->condition('cts.nid', $row->nid, '=');
    $query->orderBy('nr.vid', 'DESC');
    $query->range(0,1);
    $result = $query->execute();

    $edition_body = $result->fetchField();

    $alias_query = db_select('url_alias', 'ua');
    $alias_query->fields('ua', array('dst'));
    $alias_query->condition('ua.src', 'node/'.$row->nid, '=');
    $alias = $alias_query->execute();
    $alias = $alias->fetchField();
    if (strstr($edition_body, '/node/'.$row->nid) or strstr($edition_body, $alias)) {
      $node->promote = 1;
    }

    // To maintain the same NID, use drupal_write_record() first, then save.
    db_set_active('default');
    if ($node->title != '') { 
      node_save($node);
      //save url alias for old ausmed nid 
      $new_nid = $node->nid;
      $path = array(
        'source' => 'node/'.$new_nid,
        'alias' => 'ausmed/node/'.$row->nid,
      );
      path_save($path);
    }
    $context['sandbox']['progress'] ++;
    $context['message'] = t('Importing node @title', array('@title' => $node->title));
    $context['sandbox']['current_node'] = $row->nid;

  }

  db_set_active('default'); // Switch back.

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

//custom_import_batch_news_comments

function custom_import_ausmed_batch_comments(&$context) {
//start to migrate comment
  $previous_db = db_set_active('ausmed'); // Switch databases.

  // Build the total import count.
  if (empty($context['sandbox'])) {
    $query = db_select('comments');
    $query->addExpression('COUNT(cid)', 'count');
    $max = $query->execute()->fetchField();

    $context['sandbox'] = array(
      'progress' => 0,
      'current_comment' => 0,
      'max' => $max,
    );
  }

  $limit = 20; // Number of nodes to process at a time.
  $query = db_select('comments', 'c');
  $query->fields('c');
  $query->orderBy('c.cid', 'asc');
  $query->condition('cid', $context['sandbox']['current_comment'], '>');
  $query->range(0, $limit);
  $result = $query->execute();

  foreach ($result as $row) {
    db_set_active('default');
    $comment = (object) $row;
    $old_nid = $row->nid;
    $comment_match = _custom_import_ausmed_comment_statistic($old_nid);
    $comment->nid = $comment_match;    
    $comment->name = $row->name;
    $comment->mail = $row->mail;
    $comment->node_type = 'comment_node_ausmed_article';
    $comment->language = LANGUAGE_NONE;
    $comment->status = (int) !$row->status; // Flipped between D6 and D7.
    $comment->created = $row->timestamp;
    $comment->changed = $row->timestamp;
    $comment->comment_body[LANGUAGE_NONE][0] = array('value' => $row->comment, 'format' => 'filtered_html');
    if ($comment->nid != null) {
      comment_save($comment);
    }
    $context['sandbox']['progress'] ++;
    $context['message'] = t('Importing comment @subject', array('@subject' => $comment->subject));
    $context['sandbox']['current_comment'] = $row->cid;
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function _custom_import_ausmed_comment_statistic($old_nid) {
  //attach comment statistic patch
     
  db_set_active('ausmed'); 
  $user = db_select('users', 'u');
  $user->fields('u', array('mail'));
  $user->condition('uid', $old_uid, '=');
  $user->distinct($distinct = TRUE);
  $user_email = $user->execute();
  $user_email = $user_email->fetchField();

  db_set_active('default');
  $user_id = db_select('users', 'u');
  $user_id->fields('u', array('uid'));
  $user_id->condition('mail', $user_email, '=');
  $uid = $user_id->execute();
  $uid = $uid->fetchField();
  if ($uid == null or $uid == '') {
    $uid = 0;
  }
  $path = drupal_lookup_path('source', 'ausmed/node/'.$old_nid);
  $nid = str_replace('node/', '', $path); 
  $nid = (int)$nid;
  return $nid;
}
